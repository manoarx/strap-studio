<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Http\Controllers\Traits\MediaUploadingTrait;
use Illuminate\Http\Request;
use App\Models\Portfolios;
use Illuminate\Support\Str;
use App\Models\Media;

class VideosController extends Controller
{
    use MediaUploadingTrait;
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $portfolios = Portfolios::where('type','video')->get();

        return view('backend.videos.index', compact('portfolios'));
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        return view('backend.videos.create');
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        //return $request;
        $request->validate([
            'name' => 'required|string',
        ]);

        $portfolios = Portfolios::create(array_merge($request->all(), ['slug' => Str::slug($request->name)]));

        foreach ($request->input('photos', []) as $file) {
            $portfolios->addMedia(storage_path('tmp/uploads/' . $file))->toMediaCollection('photos');
        }

        if ($request->hasFile('videos')) {
            $request->validate([
                'videos.*' => 'required|mimes:mp4,mov,avi',
            ]);
            foreach ($request->file('videos') as $video) {
                $media = $this->saveMedia($video, 'videos', $portfolios, 'video');
            }
        }
        
        $portfolios->save();

        return redirect()->route('admin.videos.index');
    }

    /**
     * Display the specified resource.
     *
     * @param  \App\Models\Portfolios  $portfolios
     * @return \Illuminate\Http\Response
     */
    public function show(Portfolios $video)
    {
        return view('backend.videos.show', compact('video'));
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  \App\Models\Portfolios  $portfolios
     * @return \Illuminate\Http\Response
     */
    public function edit(Portfolios $video)
    {
        return view('backend.videos.edit', compact('video'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \App\Models\Portfolios  $portfolio
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, Portfolios $portfolio)
    {
        $request->validate([
            'name' => 'required|string',
        ]);
        //$portfolio->update(array_merge($request->all(), ['slug' => Str::slug($request->name)]));

        $portfolio = Portfolios::find($request->id);
        $portfolio->name = $request->name;
        $portfolio->slug = Str::slug($request->name);
        

        if (count($portfolio->photos) > 0) {
            foreach ($portfolio->photos as $media) {
                if (!in_array($media->file_name, $request->input('photos', []))) {
                    $media->delete();
                }
            }
        }

        $media = $portfolio->photos->pluck('file_name')->toArray();

        foreach ($request->input('photos', []) as $file) {
            if (count($media) === 0 || !in_array($file, $media)) {
                $portfolio->addMedia(storage_path('tmp/uploads/' . $file))->toMediaCollection('photos');
            }
        }

        $portfolio->save();

        if ($request->hasFile('videos')) {
            $request->validate([
                'name' => 'required|string',
                'videos.*' => 'required|mimes:mp4,mov,avi',
            ]);
            foreach ($request->file('videos') as $video) {
                $media = $this->saveMedia($video, 'videos', $portfolio, 'video');
            }
        }

        return redirect()->route('admin.videos.index');
    }




    /**
     * Remove the specified resource from storage.
     *
     * @param  \App\Models\Portfolios  $portfolio
     * @return \Illuminate\Http\Response
     */
    public function destroy(Request $request, Portfolios $video)
    {
        $video->delete();

        return back();
    }

    public function massDestroy(Request $request)
    {
        Portfolios::whereIn('id', request('ids'))->delete();

        return response(null, Response::HTTP_NO_CONTENT);
    }

    
    public function ajaxDelete(Request $request, $id)
    {
        $video = Media::findOrFail($id);
        $video->delete();

        return response()->json(['message' => 'Video deleted successfully']);
    }

}
